// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Player.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
#include "Player.hpp"

#undef BEFORE_EXTRA

class ServerPlayer : public Player {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SERVERPLAYER
public:
    class ServerPlayer& operator=(class ServerPlayer const &) = delete;
    ServerPlayer(class ServerPlayer const &) = delete;
    ServerPlayer() = delete;
#endif


public:
    /*10*/ virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*12*/ virtual void _serverInitItemStackIds();
    /*14*/ virtual ~ServerPlayer();
    /*40*/ virtual void __unk_vfn_40();
    /*48*/ virtual void normalTick();
    /*60*/ virtual void __unk_vfn_60();
    /*67*/ virtual void __unk_vfn_67();
    /*81*/ virtual void __unk_vfn_81();
    /*87*/ virtual void __unk_vfn_87();
    /*94*/ virtual void __unk_vfn_94();
    /*97*/ virtual void __unk_vfn_97();
    /*104*/ virtual void __unk_vfn_104();
    /*106*/ virtual void __unk_vfn_106();
    /*107*/ virtual void __unk_vfn_107();
    /*108*/ virtual void __unk_vfn_108();
    /*113*/ virtual bool isValidTarget(class Actor *) const;
    /*140*/ virtual void handleEntityEvent(enum ActorEvent, int);
    /*151*/ virtual void setArmor(enum ArmorSlot, class ItemStack const &);
    /*161*/ virtual void setOffhandSlot(class ItemStack const &);
    /*166*/ virtual bool load(class CompoundTag const &, class DataLoadHelper &);
    /*179*/ virtual bool canChangeDimensions() const;
    /*180*/ virtual void __unk_vfn_180();
    /*181*/ virtual void changeDimension(class AutomaticID<class Dimension, int>, bool);
    /*182*/ virtual struct ActorUniqueID getControllingPlayer() const;
    /*183*/ virtual void checkFallDamage(float, bool);
    /*185*/ virtual void handleFallDistanceOnServer(float, float, bool);
    /*194*/ virtual void __unk_vfn_194();
    /*212*/ virtual void onEffectAdded(class MobEffectInstance &);
    /*213*/ virtual void onEffectUpdated(class MobEffectInstance &);
    /*214*/ virtual void onEffectRemoved(class MobEffectInstance &);
    /*219*/ virtual void __unk_vfn_219();
    /*220*/ virtual void __unk_vfn_220();
    /*245*/ virtual void __unk_vfn_245();
    /*248*/ virtual void __unk_vfn_248();
    /*250*/ virtual void die(class ActorDamageSource const &);
    /*264*/ virtual void __unk_vfn_264();
    /*272*/ virtual void __unk_vfn_272();
    /*281*/ virtual void __unk_vfn_281();
    /*282*/ virtual void knockback(class Actor *, int, float, float, float, float, float);
    /*297*/ virtual void aiStep();
    /*310*/ virtual void __unk_vfn_310();
    /*314*/ virtual void __unk_vfn_314();
    /*322*/ virtual void hurtArmorSlots(class ActorDamageSource const &, int, class std::bitset<4>);
    /*323*/ virtual void setDamagedArmor(enum ArmorSlot, class ItemStack const &);
    /*324*/ virtual void sendArmorDamage(class std::bitset<4>);
    /*325*/ virtual void sendArmor(class std::bitset<4>);
    /*335*/ virtual void clearVanishEnchantedItemsOnDeath();
    /*336*/ virtual void sendInventory(bool);
    /*348*/ virtual void __unk_vfn_348();
    /*362*/ virtual void __unk_vfn_362();
    /*364*/ virtual void prepareRegion(class ChunkSource &);
    /*365*/ virtual void destroyRegion();
    /*366*/ virtual void suspendRegion();
    /*367*/ virtual void resendAllChunks();
    /*370*/ virtual void changeDimensionWithCredits(class AutomaticID<class Dimension, int>);
    /*371*/ virtual void tickWorld(struct Tick const &);
    /*372*/ virtual void __unk_vfn_372();
    /*374*/ virtual void moveView();
    /*377*/ virtual void checkMovementStats(class Vec3 const &);
    /*378*/ virtual void __unk_vfn_378();
    /*379*/ virtual void __unk_vfn_379();
    /*381*/ virtual void __unk_vfn_381();
    /*382*/ virtual void __unk_vfn_382();
    /*387*/ virtual void __unk_vfn_387();
    /*388*/ virtual void __unk_vfn_388();
    /*389*/ virtual void openTrading(struct ActorUniqueID const &, bool);
    /*391*/ virtual void __unk_vfn_391();
    /*392*/ virtual void openNpcInteractScreen(class std::shared_ptr<struct INpcDialogueData>);
    /*393*/ virtual void openInventory();
    /*394*/ virtual void __unk_vfn_394();
    /*395*/ virtual void __unk_vfn_395();
    /*396*/ virtual void displayTextObjectMessage(class TextObjectRoot const &, std::string const &, std::string const &);
    /*397*/ virtual void displayTextObjectWhisperMessage(class ResolvedTextObject const &, std::string const &, std::string const &);
    /*398*/ virtual void displayWhisperMessage(std::string const &, std::string const &, std::string const &, std::string const &);
    /*400*/ virtual void stopSleepInBed(bool, bool);
    /*404*/ virtual void __unk_vfn_404();
    /*405*/ virtual void __unk_vfn_405();
    /*406*/ virtual bool isHostingPlayer() const;
    /*407*/ virtual bool isLoading() const;
    /*408*/ virtual bool isPlayerInitialized() const;
    /*409*/ virtual void __unk_vfn_409();
    /*412*/ virtual void setPlayerGameType(enum GameType);
    /*416*/ virtual void __unk_vfn_416();
    /*420*/ virtual void setContainerData(class IContainerManager &, int, int);
    /*421*/ virtual void slotChanged(class IContainerManager &, class Container &, int, class ItemStack const &, class ItemStack const &, bool);
    /*423*/ virtual void refreshContainer(class IContainerManager &);
    /*426*/ virtual bool is2DPositionRelevant(class AutomaticID<class Dimension, int>, class BlockPos const &);
    /*427*/ virtual bool isActorRelevant(class Actor const &);
    /*428*/ virtual bool isTeacher() const;
    /*429*/ virtual void onSuspension();
    /*430*/ virtual void onLinkedSlotsChanged();
    /*436*/ virtual void sendInventoryTransaction(class InventoryTransaction const &) const;
    /*437*/ virtual void sendComplexInventoryTransaction(std::unique_ptr<class ComplexInventoryTransaction>) const;
    /*438*/ virtual void sendNetworkPacket(class Packet &) const;
    /*439*/ virtual class PlayerEventCoordinator & getPlayerEventCoordinator();
    /*440*/ virtual class MoveInputHandler * tryGetMoveInputHandler() const;
    /*441*/ virtual enum InputMode getInputMode() const;
    /*442*/ virtual enum ClientPlayMode getPlayMode() const;
    /*443*/ virtual void reportMovementTelemetry(enum MovementEventType);
    /*444*/ virtual void __unk_vfn_444();
    /*449*/ virtual int _getSpawnChunkLimit() const;
    /*450*/ virtual void _updateChunkPublisherView(class Vec3 const &, float);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SERVERPLAYER
    MCVAPI void frameUpdate(class FrameUpdateContextBase &);
    MCVAPI void openPortfolio();
#endif
    MCAPI ServerPlayer(class Level &, class PacketSender &, class NetworkHandler &, class ClientBlobCache::Server::ActiveTransfersManager &, enum GameType, class NetworkIdentifier const &, unsigned char, class std::function<void (class ServerPlayer &)>, class mce::UUID, std::string const &, std::string const &, std::unique_ptr<class Certificate>, int, bool, class EntityContext &);
    MCAPI void checkCheating(class Vec3 const &);
    MCAPI void disconnect();
    MCAPI void doDeleteContainerManager(bool);
    MCAPI void doInitialSpawn();
    MCAPI class ItemStackNetManagerServer & getItemStackNetManagerServer();
    MCAPI class ServerMoveInputHandler * getServerMoveInputHandler();
    MCAPI void handleActorPickRequestOnServer(class Actor &, bool, bool);
    MCAPI void handleBlockPickRequestOnServer(class BlockPos const &, bool);
    MCAPI enum ContainerID openUnmanagedContainer();
    MCAPI void postLoad(bool);
    MCAPI void selectItem(class ItemStack const &);
    MCAPI void sendMobEffectPackets();
    MCAPI void setClientChunkRadius(unsigned int);
    MCAPI void setInputMode(enum InputMode const &);
    MCAPI void setLocalPlayerAsInitialized();
    MCAPI void setPlayMode(enum ClientPlayMode const &);
    MCAPI void setPlayerInput(float, float, bool, bool);
    MCAPI void setSyncTimeIfClientServerPositionMatches(class Vec3 const &);
    MCAPI void triggerRespawnFromCompletingTheEnd();
    MCAPI static class ServerPlayer * tryGetFromEntity(class EntityContext &, bool);

//private:
    MCAPI void _logCDEvent(enum CrashDumpLogStringID, enum CrashDumpLogStringID, enum CrashDumpLogStringID, enum CrashDumpLogStringID);
    MCAPI enum ContainerID _nextContainerCounter();
    MCAPI void _removeNearbyEntities();
    MCAPI void _scanForNearbyActors();
    MCAPI void _setContainerManager(class std::shared_ptr<class IContainerManager>);
    MCAPI void _updateNearbyActors();


private:


};