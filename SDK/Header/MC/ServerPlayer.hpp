// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Player.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
#include "Player.hpp"

#undef BEFORE_EXTRA

class ServerPlayer : public Player {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SERVERPLAYER
public:
    class ServerPlayer& operator=(class ServerPlayer const &) = delete;
    ServerPlayer(class ServerPlayer const &) = delete;
    ServerPlayer() = delete;
#endif


public:
    /*10*/ virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*12*/ virtual void _serverInitItemStackIds();
    /*14*/ virtual ~ServerPlayer();
    /*41*/ virtual void __unk_vfn_41();
    /*49*/ virtual void normalTick();
    /*61*/ virtual void __unk_vfn_61();
    /*68*/ virtual void __unk_vfn_68();
    /*82*/ virtual void __unk_vfn_82();
    /*85*/ virtual void __unk_vfn_85();
    /*88*/ virtual void __unk_vfn_88();
    /*96*/ virtual void __unk_vfn_96();
    /*99*/ virtual void __unk_vfn_99();
    /*106*/ virtual void __unk_vfn_106();
    /*108*/ virtual void __unk_vfn_108();
    /*109*/ virtual void __unk_vfn_109();
    /*111*/ virtual void __unk_vfn_111();
    /*115*/ virtual bool isValidTarget(class Actor *) const;
    /*142*/ virtual void handleEntityEvent(enum ActorEvent, int);
    /*153*/ virtual void setArmor(enum ArmorSlot, class ItemStack const &);
    /*163*/ virtual void setOffhandSlot(class ItemStack const &);
    /*168*/ virtual bool load(class CompoundTag const &, class DataLoadHelper &);
    /*181*/ virtual bool canChangeDimensionsUsingPortal() const;
    /*182*/ virtual void __unk_vfn_182();
    /*183*/ virtual void changeDimension(class AutomaticID<class Dimension, int>);
    /*184*/ virtual struct ActorUniqueID getControllingPlayer() const;
    /*185*/ virtual void checkFallDamage(float, bool);
    /*187*/ virtual void handleFallDistanceOnServer(float, float, bool);
    /*196*/ virtual void __unk_vfn_196();
    /*214*/ virtual void onEffectAdded(class MobEffectInstance &);
    /*215*/ virtual void onEffectUpdated(class MobEffectInstance &);
    /*216*/ virtual void onEffectRemoved(class MobEffectInstance &);
    /*222*/ virtual void __unk_vfn_222();
    /*223*/ virtual void __unk_vfn_223();
    /*248*/ virtual void __unk_vfn_248();
    /*251*/ virtual void __unk_vfn_251();
    /*253*/ virtual void die(class ActorDamageSource const &);
    /*269*/ virtual void __unk_vfn_269();
    /*277*/ virtual void __unk_vfn_277();
    /*285*/ virtual void __unk_vfn_285();
    /*286*/ virtual void knockback(class Actor *, int, float, float, float, float, float);
    /*300*/ virtual void aiStep();
    /*313*/ virtual void __unk_vfn_313();
    /*317*/ virtual void __unk_vfn_317();
    /*325*/ virtual void hurtArmorSlots(class ActorDamageSource const &, int, class std::bitset<4>);
    /*326*/ virtual void setDamagedArmor(enum ArmorSlot, class ItemStack const &);
    /*327*/ virtual void sendArmorDamage(class std::bitset<4>);
    /*328*/ virtual void sendArmor(class std::bitset<4>);
    /*338*/ virtual void clearVanishEnchantedItemsOnDeath();
    /*339*/ virtual void sendInventory(bool);
    /*351*/ virtual void __unk_vfn_351();
    /*365*/ virtual void __unk_vfn_365();
    /*367*/ virtual void prepareRegion(class ChunkSource &);
    /*368*/ virtual void destroyRegion();
    /*373*/ virtual void changeDimensionWithCredits(class AutomaticID<class Dimension, int>);
    /*374*/ virtual void tickWorld(struct Tick const &);
    /*375*/ virtual void __unk_vfn_375();
    /*377*/ virtual void moveView();
    /*378*/ virtual void moveSpawnView(class Vec3 const &, class AutomaticID<class Dimension, int>);
    /*381*/ virtual void checkMovementStats(class Vec3 const &);
    /*382*/ virtual void __unk_vfn_382();
    /*383*/ virtual void __unk_vfn_383();
    /*385*/ virtual void __unk_vfn_385();
    /*386*/ virtual void __unk_vfn_386();
    /*391*/ virtual void __unk_vfn_391();
    /*392*/ virtual void __unk_vfn_392();
    /*393*/ virtual void openTrading(struct ActorUniqueID const &, bool);
    /*395*/ virtual void __unk_vfn_395();
    /*396*/ virtual void openNpcInteractScreen(class std::shared_ptr<struct INpcDialogueData>);
    /*397*/ virtual void openInventory();
    /*398*/ virtual void __unk_vfn_398();
    /*399*/ virtual void __unk_vfn_399();
    /*400*/ virtual void displayTextObjectMessage(class TextObjectRoot const &, std::string const &, std::string const &);
    /*401*/ virtual void displayTextObjectWhisperMessage(class ResolvedTextObject const &, std::string const &, std::string const &);
    /*402*/ virtual void displayTextObjectWhisperMessage(std::string const &, std::string const &, std::string const &);
    /*403*/ virtual void displayWhisperMessage(std::string const &, std::string const &, std::string const &, std::string const &);
    /*405*/ virtual void stopSleepInBed(bool, bool);
    /*409*/ virtual void __unk_vfn_409();
    /*410*/ virtual void __unk_vfn_410();
    /*411*/ virtual bool isHostingPlayer() const;
    /*412*/ virtual bool isLoading() const;
    /*413*/ virtual bool isPlayerInitialized() const;
    /*414*/ virtual void __unk_vfn_414();
    /*417*/ virtual void setPlayerGameType(enum GameType);
    /*421*/ virtual void __unk_vfn_421();
    /*425*/ virtual void setContainerData(class IContainerManager &, int, int);
    /*426*/ virtual void slotChanged(class IContainerManager &, class Container &, int, class ItemStack const &, class ItemStack const &, bool);
    /*428*/ virtual void refreshContainer(class IContainerManager &);
    /*431*/ virtual bool isActorRelevant(class Actor const &);
    /*432*/ virtual bool isTeacher() const;
    /*433*/ virtual void onSuspension();
    /*434*/ virtual void onLinkedSlotsChanged();
    /*440*/ virtual void sendInventoryTransaction(class InventoryTransaction const &) const;
    /*441*/ virtual void sendComplexInventoryTransaction(std::unique_ptr<class ComplexInventoryTransaction>) const;
    /*442*/ virtual void sendNetworkPacket(class Packet &) const;
    /*443*/ virtual class PlayerEventCoordinator & getPlayerEventCoordinator();
    /*444*/ virtual class MoveInputHandler * tryGetMoveInputHandler() const;
    /*445*/ virtual enum InputMode getInputMode() const;
    /*446*/ virtual enum ClientPlayMode getPlayMode() const;
    /*447*/ virtual void reportMovementTelemetry(enum MovementEventType);
    /*448*/ virtual void __unk_vfn_448();
    /*451*/ virtual void addSavedChunk(class ChunkPos const &);
    /*454*/ virtual int _getSpawnChunkLimit() const;
    /*455*/ virtual void _updateChunkPublisherView(class Vec3 const &, float);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SERVERPLAYER
    MCVAPI void frameUpdate(class FrameUpdateContextBase &);
    MCVAPI void openPortfolio();
#endif
    MCAPI ServerPlayer(class Level &, class PacketSender &, class NetworkHandler &, class ClientBlobCache::Server::ActiveTransfersManager &, enum GameType, class NetworkIdentifier const &, enum SubClientId, class std::function<void (class ServerPlayer &)>, class mce::UUID, std::string const &, std::string const &, std::unique_ptr<class Certificate>, int, bool, class EntityContext &);
    MCAPI void checkCheating(class Vec3 const &);
    MCAPI void disconnect();
    MCAPI void doDeleteContainerManager(bool);
    MCAPI void doInitialSpawn();
    MCAPI class ItemStackNetManagerServer & getItemStackNetManagerServer();
    MCAPI class ServerMoveInputHandler * getServerMoveInputHandler();
    MCAPI void handleActorPickRequestOnServer(class Actor &, bool, bool);
    MCAPI void handleBlockPickRequestOnServer(class BlockPos const &, bool);
    MCAPI enum ContainerID openUnmanagedContainer();
    MCAPI void postLoad(bool);
    MCAPI void selectItem(class ItemStack const &);
    MCAPI void sendMobEffectPackets();
    MCAPI void setClientChunkRadius(unsigned int);
    MCAPI void setInputMode(enum InputMode const &);
    MCAPI void setLocalPlayerAsInitialized();
    MCAPI void setPlayMode(enum ClientPlayMode const &);
    MCAPI void setPlayerInput(float, float, bool, bool);
    MCAPI void setSyncTimeIfClientServerPositionMatches(class Vec3 const &);
    MCAPI void triggerRespawnFromCompletingTheEnd();
    MCAPI static class ServerPlayer * tryGetFromEntity(class EntityContext &, bool);

//private:
    MCAPI bool _checkForLoadedTickingAreas() const;
    MCAPI void _logCDEvent(enum CrashDumpLogStringID, enum CrashDumpLogStringID, enum CrashDumpLogStringID, enum CrashDumpLogStringID);
    MCAPI enum ContainerID _nextContainerCounter();
    MCAPI void _removeNearbyEntities();
    MCAPI void _scanForNearbyActors();
    MCAPI void _setContainerManager(class std::shared_ptr<class IContainerManager>);
    MCAPI void _updateNearbyActors();


private:


};