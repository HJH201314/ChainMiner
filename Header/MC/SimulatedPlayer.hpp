// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Bedrock.hpp"
#include "ServerPlayer.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
#include "ScriptNavigationResult.hpp"

#undef BEFORE_EXTRA

class SimulatedPlayer : public ServerPlayer {

#define AFTER_EXTRA
// Add Member There
public:
    LIAPI bool simulateDestory();
    LIAPI bool simulateUseItem();
    LIAPI bool simulateSneak();
    LIAPI bool simulateStopSneaking();
    LIAPI static class SimulatedPlayer* create(std::string const& name, class BlockPos const& position, class AutomaticID<class Dimension, int> dimensionId = 0);
    LIAPI static class SimulatedPlayer* create(std::string const& name, class AutomaticID<class Dimension, int> dimensionId = 0);

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SIMULATEDPLAYER
public:
    class SimulatedPlayer& operator=(class SimulatedPlayer const &) = delete;
    SimulatedPlayer(class SimulatedPlayer const &) = delete;
    SimulatedPlayer() = delete;
#endif


public:
    /*10*/ virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*14*/ virtual ~SimulatedPlayer();
    /*40*/ virtual void __unk_vfn_40();
    /*60*/ virtual void __unk_vfn_60();
    /*67*/ virtual void __unk_vfn_67();
    /*81*/ virtual void __unk_vfn_81();
    /*87*/ virtual void __unk_vfn_87();
    /*94*/ virtual void __unk_vfn_94();
    /*97*/ virtual void __unk_vfn_97();
    /*104*/ virtual void __unk_vfn_104();
    /*106*/ virtual void __unk_vfn_106();
    /*107*/ virtual void __unk_vfn_107();
    /*108*/ virtual void __unk_vfn_108();
    /*180*/ virtual void __unk_vfn_180();
    /*194*/ virtual void __unk_vfn_194();
    /*219*/ virtual void __unk_vfn_219();
    /*220*/ virtual void __unk_vfn_220();
    /*245*/ virtual void __unk_vfn_245();
    /*248*/ virtual void __unk_vfn_248();
    /*264*/ virtual void __unk_vfn_264();
    /*272*/ virtual void __unk_vfn_272();
    /*281*/ virtual void __unk_vfn_281();
    /*297*/ virtual void aiStep();
    /*310*/ virtual void __unk_vfn_310();
    /*314*/ virtual void __unk_vfn_314();
    /*348*/ virtual void __unk_vfn_348();
    /*362*/ virtual void __unk_vfn_362();
    /*372*/ virtual void __unk_vfn_372();
    /*378*/ virtual void __unk_vfn_378();
    /*379*/ virtual void __unk_vfn_379();
    /*381*/ virtual void __unk_vfn_381();
    /*382*/ virtual void __unk_vfn_382();
    /*387*/ virtual void __unk_vfn_387();
    /*388*/ virtual void __unk_vfn_388();
    /*391*/ virtual void __unk_vfn_391();
    /*394*/ virtual void __unk_vfn_394();
    /*395*/ virtual void __unk_vfn_395();
    /*404*/ virtual void __unk_vfn_404();
    /*405*/ virtual void __unk_vfn_405();
    /*409*/ virtual void __unk_vfn_409();
    /*416*/ virtual void __unk_vfn_416();
    /*444*/ virtual void __unk_vfn_444();
    /*445*/ virtual std::string getXuid() const;
    /*446*/ virtual struct PlayerMovementSettings const & getMovementSettings() const;
    /*448*/ virtual class std::shared_ptr<class ChunkViewSource> _createChunkSource(class ChunkSource &);
    /*449*/ virtual int _getSpawnChunkLimit() const;
    /*450*/ virtual void _updateChunkPublisherView(class Vec3 const &, float);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SIMULATEDPLAYER
    MCVAPI bool isSimulated() const;
    MCVAPI bool useNewAi() const;
#endif
    MCAPI SimulatedPlayer(class Level &, class PacketSender &, class NetworkHandler &, class ClientBlobCache::Server::ActiveTransfersManager &, enum GameType, class NetworkIdentifier const &, unsigned char, class std::function<void (class ServerPlayer &)>, class mce::UUID, std::string const &, std::unique_ptr<class Certificate>, int, bool, class EntityContext &);
    MCAPI class Bedrock::NonOwnerPointer<class gametest::BaseGameTestHelper> getGameTestHelper() const;
    MCAPI void setGameTestHelper(class Bedrock::NonOwnerPointer<class gametest::BaseGameTestHelper>);
    MCAPI bool simulateAttack(class Actor *);
    MCAPI bool simulateAttack();
    MCAPI bool simulateDestroyBlock(class BlockPos const &, enum ScriptFacing);
    MCAPI void simulateDisconnect();
    MCAPI bool simulateGiveItem(class ItemStack &, bool);
    MCAPI bool simulateInteract(class Actor &);
    MCAPI bool simulateInteract(class BlockPos const &, enum ScriptFacing);
    MCAPI bool simulateInteract();
    MCAPI bool simulateJump();
    MCAPI void simulateLocalMove(class Vec3 const &, float);
    MCAPI void simulateLookAt(class Actor &);
    MCAPI void simulateLookAt(class BlockPos const &);
    MCAPI void simulateLookAt(class Vec3 const &);
    MCAPI void simulateMoveToLocation(class Vec3 const &, float);
    MCAPI struct ScriptNavigationResult simulateNavigateToEntity(class Actor &, float);
    MCAPI struct ScriptNavigationResult simulateNavigateToLocation(class Vec3 const &, float);
    MCAPI void simulateNavigateToLocations(std::vector<class Vec3> &&, float);
    MCAPI void simulateSetBodyRotation(float);
    MCAPI bool simulateSetItem(class ItemStack &, bool, int);
    MCAPI void simulateStopDestroyingBlock();
    MCAPI void simulateStopInteracting();
    MCAPI void simulateStopMoving();
    MCAPI void simulateStopUsingItem();
    MCAPI bool simulateUseItem(class ItemStack &);
    MCAPI bool simulateUseItemInSlot(int);
    MCAPI bool simulateUseItemInSlotOnBlock(int, class BlockPos const &, enum ScriptFacing, class Vec3 const &);
    MCAPI bool simulateUseItemOnBlock(class ItemStack &, class BlockPos const &, enum ScriptFacing, class Vec3 const &);
    MCAPI void simulateWorldMove(class Vec3 const &, float);
    MCAPI static class SimulatedPlayer * create(std::string const &, class BlockPos const &, class AutomaticID<class Dimension, int>, class gsl::not_null<class Bedrock::NonOwnerPointer<class ServerNetworkHandler>>);
    MCAPI static class SimulatedPlayer * tryGetFromEntity(class EntityContext &, bool);

//private:
    MCAPI void _addMoveComponent();
    MCAPI struct ScriptNavigationResult _createNavigationResult(class NavigationComponent *) const;
    MCAPI float _getInputSpeed();
    MCAPI void _startCooldown();
    MCAPI bool _trySwing();
    MCAPI void _updateMovement();
    MCAPI void _updateRidingComponents();


private:


};