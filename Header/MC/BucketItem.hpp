// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "Item.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class BucketItem : public Item {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_BUCKETITEM
public:
    class BucketItem& operator=(class BucketItem const &) = delete;
    BucketItem(class BucketItem const &) = delete;
    BucketItem() = delete;
#endif


public:
    /*0*/ virtual ~BucketItem();
    /*7*/ virtual void __unk_vfn_7();
    /*10*/ virtual void __unk_vfn_10();
    /*13*/ virtual void __unk_vfn_13();
    /*15*/ virtual void __unk_vfn_15();
    /*51*/ virtual void __unk_vfn_51();
    /*53*/ virtual void __unk_vfn_53();
    /*56*/ virtual bool isDestructive(int) const;
    /*57*/ virtual bool isLiquidClipItem(int) const;
    /*66*/ virtual void __unk_vfn_66();
    /*67*/ virtual bool isValidAuxValue(int) const;
    /*70*/ virtual void __unk_vfn_70();
    /*71*/ virtual void __unk_vfn_71();
    /*72*/ virtual void __unk_vfn_72();
    /*75*/ virtual void __unk_vfn_75();
    /*79*/ virtual void __unk_vfn_79();
    /*80*/ virtual void __unk_vfn_80();
    /*83*/ virtual bool canUseOnSimTick() const;
    /*84*/ virtual class ItemStack & use(class ItemStack &, class Player &) const;
    /*85*/ virtual bool dispense(class BlockSource &, class Container &, int, class Vec3 const &, unsigned char) const;
    /*86*/ virtual enum ItemUseMethod useTimeDepleted(class ItemStack &, class Level *, class Player *) const;
    /*87*/ virtual void releaseUsing(class ItemStack &, class Player *, int) const;
    /*95*/ virtual std::string buildDescriptionId(class ItemDescriptor const &, class CompoundTag const *) const;
    /*100*/ virtual unsigned char getMaxStackSize(class ItemDescriptor const &) const;
    /*112*/ virtual bool validFishInteraction(int) const;
    /*118*/ virtual struct Brightness getLightEmission(int) const;
    /*119*/ virtual struct TextureUVCoordinateSet const & getIcon(class ItemStackBase const &, int, bool) const;
    /*121*/ virtual class Item & setIcon(std::string const &, int);
    /*129*/ virtual std::string getAuxValuesDescription() const;
    /*132*/ virtual bool _useOn(class ItemStack &, class Actor &, class BlockPos, unsigned char, class Vec3 const &) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_BUCKETITEM
    MCVAPI bool isBucket() const;
    MCVAPI bool uniqueAuxValues() const;
#endif
    MCAPI BucketItem(std::string const &, int, enum BucketFillType);
    MCAPI static int const DRINK_DURATION;

//protected:
    MCAPI void addBucketEntitySaveData(class Actor &, class ItemStack &) const;
    MCAPI bool readBucketEntitySaveData(class BlockSource &, class Actor *, unsigned char, class BlockPos, class ItemInstance const &) const;

//private:
    MCAPI bool _emptyBucket(class BlockSource &, class Block const &, class BlockPos const &, class Actor *, class ItemStack const &, unsigned char) const;
    MCAPI bool _takeLiquid(class ItemStack &, class Actor &, class BlockPos const &) const;
    MCAPI bool _takePowderSnow(class ItemStack &, class Actor &, class BlockPos const &) const;


protected:

private:
    MCAPI static std::vector<struct std::pair<enum BucketFillType, enum ActorType>> const mFillTypeToEntityType;


};