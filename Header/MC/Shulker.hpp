// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Mob.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class Shulker : public Mob {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SHULKER
public:
    class Shulker& operator=(class Shulker const &) = delete;
    Shulker(class Shulker const &) = delete;
    Shulker() = delete;
#endif


public:
    /*8*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*14*/ virtual ~Shulker();
    /*19*/ virtual void setPos(class Vec3 const &);
    /*41*/ virtual void __unk_vfn_41();
    /*49*/ virtual void normalTick();
    /*58*/ virtual bool isInWall() const;
    /*61*/ virtual void __unk_vfn_61();
    /*68*/ virtual void __unk_vfn_68();
    /*80*/ virtual float getShadowRadius() const;
    /*82*/ virtual void __unk_vfn_82();
    /*85*/ virtual void __unk_vfn_85();
    /*88*/ virtual void __unk_vfn_88();
    /*96*/ virtual void __unk_vfn_96();
    /*99*/ virtual void __unk_vfn_99();
    /*106*/ virtual void __unk_vfn_106();
    /*108*/ virtual void __unk_vfn_108();
    /*109*/ virtual void __unk_vfn_109();
    /*111*/ virtual void __unk_vfn_111();
    /*113*/ virtual bool canAttack(class Actor *, bool) const;
    /*132*/ virtual bool shouldRender() const;
    /*135*/ virtual bool isInvulnerableTo(class ActorDamageSource const &) const;
    /*143*/ virtual float getPickRadius();
    /*182*/ virtual void __unk_vfn_182();
    /*196*/ virtual void __unk_vfn_196();
    /*222*/ virtual void __unk_vfn_222();
    /*223*/ virtual void __unk_vfn_223();
    /*248*/ virtual void __unk_vfn_248();
    /*251*/ virtual void __unk_vfn_251();
    /*267*/ virtual void updateEntitySpecificMolangVariables(class RenderParams &);
    /*269*/ virtual void __unk_vfn_269();
    /*270*/ virtual bool _hurt(class ActorDamageSource const &, float, bool, bool);
    /*273*/ virtual void readAdditionalSaveData(class CompoundTag const &, class DataLoadHelper &);
    /*274*/ virtual void addAdditionalSaveData(class CompoundTag &) const;
    /*277*/ virtual void __unk_vfn_277();
    /*284*/ virtual void _onSizeUpdated();
    /*285*/ virtual void __unk_vfn_285();
    /*297*/ virtual void travel(float, float, float);
    /*300*/ virtual void aiStep();
    /*305*/ virtual bool checkSpawnRules(bool);
    /*313*/ virtual void __unk_vfn_313();
    /*314*/ virtual float getMaxHeadXRot();
    /*317*/ virtual void __unk_vfn_317();
    /*322*/ virtual int getArmorValue() const;
    /*351*/ virtual void __unk_vfn_351();
    /*356*/ virtual std::unique_ptr<class BodyControl> initBodyControl();
    /*365*/ virtual void __unk_vfn_365();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SHULKER
    MCVAPI bool breaksFallingBlocks() const;
    MCVAPI bool isLeashableType();
    MCVAPI bool useNewAi() const;
#endif
    MCAPI Shulker(class ActorDefinitionGroup *, struct ActorDefinitionIdentifier const &, class EntityContext &);
    MCAPI void postNormalTick();
    MCAPI static class std::shared_ptr<class AttributeModifier> COVERED_ARMOR_MODIFIER;
    MCAPI static class mce::UUID const COVERED_ARMOR_MODIFIER_UUID;
    MCAPI static void setShulkerAttachPos(class SynchedActorData &, class BlockPos const &);

//protected:
    MCAPI bool _canOpenLidAt(class BlockPos, unsigned char) const;
    MCAPI static void _setPeekAmount(class SynchedActorData &, int);

//private:
    MCAPI void _calculateBB();
    MCAPI bool _isPosOccupiedByOtherShulker(class BlockPos) const;
    MCAPI bool _isValidAttach(class BlockPos, unsigned char);
    MCAPI void _peekAmountTick();
    MCAPI void _setAttachFace(unsigned char);
    MCAPI bool _tryAttachingToNeighbouringFaces(class BlockPos);
    MCAPI void _trySpawnShulker();
    MCAPI bool _tryTeleportSomewhere();


protected:

private:


};