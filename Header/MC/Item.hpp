// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class Item {

#define AFTER_EXTRA
// Add Member There
public:
class Tier {
public:
    Tier() = delete;
    Tier(Tier const&) = delete;
    Tier(Tier const&&) = delete;
};

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ITEM
public:
    class Item& operator=(class Item const &) = delete;
    Item(class Item const &) = delete;
    Item() = delete;
#endif


public:
    /*0*/ virtual ~Item();
    /*1*/ virtual bool initServer(class Json::Value &, class SemVersion const &);
    /*2*/ virtual void tearDown();
    /*3*/ virtual class Item & setDescriptionId(std::string const &);
    /*4*/ virtual std::string const & getDescriptionId() const;
    /*5*/ virtual int getMaxUseDuration(class ItemInstance const *) const;
    /*6*/ virtual int getMaxUseDuration(class ItemStack const *) const;
    /*7*/ virtual void __unk_vfn_7();
    /*8*/ virtual bool hasTag(class HashedString const &) const;
    /*9*/ virtual void executeEvent(class ItemStackBase &, std::string const &, class RenderParams &) const;
    /*10*/ virtual void __unk_vfn_10();
    /*11*/ virtual bool isArmor() const;
    /*12*/ virtual bool isBlockPlanterItem() const;
    /*13*/ virtual void __unk_vfn_13();
    /*14*/ virtual bool isCamera() const;
    /*15*/ virtual void __unk_vfn_15();
    /*16*/ virtual bool isDamageable() const;
    /*17*/ virtual bool isDyeable() const;
    /*18*/ virtual bool isDye() const;
    /*19*/ virtual enum ItemColor getItemColor() const;
    /*20*/ virtual bool isFertilizer() const;
    /*21*/ virtual bool isFood() const;
    /*22*/ virtual bool isThrowable() const;
    /*23*/ virtual bool isUseable() const;
    /*24*/ virtual class ItemComponent * getComponent(class HashedString const &) const;
    /*25*/ virtual class ICameraItemComponent * getCamera() const;
    /*26*/ virtual class IFoodItemComponent * getFood() const;
    /*27*/ virtual class FuelItemComponent const * getFuel() const;
    /*28*/ virtual class Item & setMaxStackSize(unsigned char);
    /*29*/ virtual class Item & setStackedByData(bool);
    /*30*/ virtual class Item & setMaxDamage(int);
    /*31*/ virtual class Item & setHandEquipped();
    /*32*/ virtual class Item & setUseAnimation(enum UseAnimation);
    /*33*/ virtual class Item & setMaxUseDuration(int);
    /*34*/ virtual class Item & setRequiresWorldBuilder(bool);
    /*35*/ virtual class Item & setExplodable(bool);
    /*36*/ virtual class Item & setFireResistant(bool);
    /*37*/ virtual class Item & setIsGlint(bool);
    /*38*/ virtual class Item & setShouldDespawn(bool);
    /*39*/ virtual std::unique_ptr<class CompoundTag> buildNetworkTag() const;
    /*40*/ virtual void initializeFromNetwork(class CompoundTag const &);
    /*41*/ virtual std::vector<std::string> validateFromNetwork(class CompoundTag const &);
    /*42*/ virtual enum BlockShape getBlockShape() const;
    /*43*/ virtual bool canBeDepleted() const;
    /*44*/ virtual bool canDestroySpecial(class Block const &) const;
    /*45*/ virtual int getLevelDataForAuxValue(int) const;
    /*46*/ virtual bool isStackedByData() const;
    /*47*/ virtual short getMaxDamage() const;
    /*48*/ virtual int getAttackDamage() const;
    /*49*/ virtual bool isHandEquipped() const;
    /*50*/ virtual bool isGlint(class ItemStackBase const &) const;
    /*51*/ virtual void __unk_vfn_51();
    /*52*/ virtual int getPatternIndex() const;
    /*53*/ virtual void __unk_vfn_53();
    /*54*/ virtual bool isWearableThroughLootTable(class CompoundTag const *) const;
    /*55*/ virtual bool canDestroyInCreative() const;
    /*56*/ virtual bool isDestructive(int) const;
    /*57*/ virtual bool isLiquidClipItem(int) const;
    /*58*/ virtual bool shouldInteractionWithBlockBypassLiquid(class Block const &) const;
    /*59*/ virtual bool requiresInteract() const;
    /*60*/ virtual void appendFormattedHovertext(class ItemStackBase const &, class Level &, std::string &, bool) const;
    /*61*/ virtual bool isValidRepairItem(class ItemStackBase const &, class ItemStackBase const &, class BaseGameVersion const &) const;
    /*62*/ virtual int getEnchantSlot() const;
    /*63*/ virtual int getEnchantValue() const;
    /*64*/ virtual int getArmorValue() const;
    /*65*/ virtual int getToughnessValue() const;
    /*66*/ virtual void __unk_vfn_66();
    /*67*/ virtual bool isValidAuxValue(int) const;
    /*68*/ virtual int getDamageChance(int) const;
    /*69*/ virtual float getViewDamping() const;
    /*70*/ virtual void __unk_vfn_70();
    /*71*/ virtual void __unk_vfn_71();
    /*72*/ virtual void __unk_vfn_72();
    /*73*/ virtual class mce::Color getColor(class CompoundTag const *, class ItemDescriptor const &) const;
    /*74*/ virtual bool hasCustomColor(class CompoundTag const *) const;
    /*75*/ virtual void __unk_vfn_75();
    /*76*/ virtual void clearColor(class ItemStackBase &) const;
    /*77*/ virtual void clearColor(class CompoundTag *) const;
    /*78*/ virtual void setColor(class ItemStackBase &, class mce::Color const &) const;
    /*79*/ virtual void __unk_vfn_79();
    /*80*/ virtual void __unk_vfn_80();
    /*81*/ virtual struct ActorDefinitionIdentifier getActorIdentifier(class ItemStack const &) const;
    /*82*/ virtual int buildIdAux(short, class CompoundTag const *) const;
    /*83*/ virtual bool canUseOnSimTick() const;
    /*84*/ virtual class ItemStack & use(class ItemStack &, class Player &) const;
    /*85*/ virtual bool dispense(class BlockSource &, class Container &, int, class Vec3 const &, unsigned char) const;
    /*86*/ virtual enum ItemUseMethod useTimeDepleted(class ItemStack &, class Level *, class Player *) const;
    /*87*/ virtual void releaseUsing(class ItemStack &, class Player *, int) const;
    /*88*/ virtual float getDestroySpeed(class ItemStackBase const &, class Block const &) const;
    /*89*/ virtual void hurtActor(class ItemStack &, class Actor &, class Mob &) const;
    /*90*/ virtual void hitActor(class ItemStack &, class Actor &, class Mob &) const;
    /*91*/ virtual void hitBlock(class ItemStack &, class Block const &, class BlockPos const &, class Mob &) const;
    /*92*/ virtual bool mineBlock(class ItemInstance &, class Block const &, int, int, int, class Actor *) const;
    /*93*/ virtual bool mineBlock(class ItemStack &, class Block const &, int, int, int, class Actor *) const;
    /*94*/ virtual std::string buildDescriptionName(class ItemStackBase const &) const;
    /*95*/ virtual std::string buildDescriptionId(class ItemDescriptor const &, class CompoundTag const *) const;
    /*96*/ virtual std::string buildEffectDescriptionName(class ItemStackBase const &) const;
    /*97*/ virtual std::string buildCategoryDescriptionName() const;
    /*98*/ virtual void readUserData(class ItemStackBase &, class IDataInput &, class ReadOnlyBinaryStream &) const;
    /*99*/ virtual void writeUserData(class ItemStackBase const &, class IDataOutput &) const;
    /*100*/ virtual unsigned char getMaxStackSize(class ItemDescriptor const &) const;
    /*101*/ virtual bool inventoryTick(class ItemStack &, class Level &, class Actor &, int, bool) const;
    /*102*/ virtual void refreshedInContainer(class ItemStackBase const &, class Level &) const;
    /*103*/ virtual class HashedString const & getCooldownType() const;
    /*104*/ virtual int getCooldownTime() const;
    /*105*/ virtual void fixupCommon(class ItemStackBase &) const;
    /*106*/ virtual void fixupCommon(class ItemStackBase &, class Level &) const;
    /*107*/ virtual short getDamageValue(class CompoundTag const *) const;
    /*108*/ virtual bool hasDamageValue(class CompoundTag const *) const;
    /*109*/ virtual void setDamageValue(class ItemStackBase &, short) const;
    /*110*/ virtual enum InHandUpdateType getInHandUpdateType(class Player const &, class ItemInstance const &, class ItemInstance const &, bool, bool) const;
    /*111*/ virtual enum InHandUpdateType getInHandUpdateType(class Player const &, class ItemStack const &, class ItemStack const &, bool, bool) const;
    /*112*/ virtual bool validFishInteraction(int) const;
    /*113*/ virtual enum ActorLocation getEquipLocation() const;
    /*114*/ virtual enum LevelSoundEvent getEquipSound() const;
    /*115*/ virtual bool isSameItem(class ItemStackBase const &, class ItemStackBase const &) const;
    /*116*/ virtual void initClient(class Json::Value &, class SemVersion const &);
    /*117*/ virtual std::string getInteractText(class Player const &) const;
    /*118*/ virtual int getAnimationFrameFor(class Mob *, bool, class ItemStack const *, bool) const;
    /*119*/ virtual bool isEmissive(int) const;
    /*120*/ virtual struct Brightness getLightEmission(int) const;
    /*121*/ virtual struct TextureUVCoordinateSet const & getIcon(class ItemStackBase const &, int, bool) const;
    /*122*/ virtual int getIconYOffset() const;
    /*123*/ virtual class Item & setIcon(std::string const &, int);
    /*124*/ virtual class Item & setIcon(struct TextureUVCoordinateSet const &);
    /*125*/ virtual class Item & setIconAtlas(std::string const &, int);
    /*126*/ virtual bool canBeCharged() const;
    /*127*/ virtual void playSoundIncrementally(class ItemInstance const &, class Mob &) const;
    /*128*/ virtual void playSoundIncrementally(class ItemStack const &, class Mob &) const;
    /*129*/ virtual float getFurnaceBurnIntervalMultipler(class ItemStackBase const &) const;
    /*130*/ virtual float getFurnaceXPmultiplier(class ItemStackBase const &) const;
    /*131*/ virtual std::string getAuxValuesDescription() const;
    /*132*/ virtual bool _checkUseOnPermissions(class Actor &, class ItemStackBase &, unsigned char const &, class BlockPos const &) const;
    /*133*/ virtual bool _calculatePlacePos(class ItemStackBase &, class Actor &, unsigned char &, class BlockPos &) const;
    /*134*/ virtual bool _useOn(class ItemStack &, class Actor &, class BlockPos, unsigned char, class Vec3 const &) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_ITEM
    MCVAPI class mce::Color getBaseColor(class ItemStack const &) const;
    MCVAPI class mce::Color getSecondaryColor(class ItemStack const &) const;
    MCVAPI bool hasCustomColor(class ItemStackBase const &) const;
    MCVAPI bool isActorPlacerItem() const;
    MCVAPI bool isBucket() const;
    MCVAPI bool isCandle() const;
    MCVAPI bool isComplex() const;
    MCVAPI bool isComponentBased() const;
    MCVAPI bool isMultiColorTinted(class ItemStack const &) const;
    MCVAPI bool isMusicDisk() const;
    MCVAPI bool isPattern() const;
    MCVAPI bool showsDurabilityInCreative() const;
    MCVAPI bool uniqueAuxValues() const;
#endif
    MCAPI Item(std::string const &, short);
    MCAPI void addOnResetBAIcallback(class std::function<void (void)> const &);
    MCAPI class Item & addTag(class HashedString const &);
    MCAPI bool allowOffhand() const;
    MCAPI class ItemDescriptor buildDescriptor(short, class CompoundTag const *) const;
    MCAPI bool calculatePlacePos(class ItemStackBase &, class Actor &, unsigned char &, class BlockPos &) const;
    MCAPI float destroySpeedBonus(class ItemStackBase const &) const;
    MCAPI void fixupOnLoad(class ItemStackBase &) const;
    MCAPI void fixupOnLoad(class ItemStackBase &, class Level &) const;
    MCAPI std::vector<struct CommandName> getCommandNames() const;
    MCAPI enum CreativeItemCategory getCreativeCategory() const;
    MCAPI std::string const & getCreativeGroup() const;
    MCAPI int getFrameCount() const;
    MCAPI std::string const & getFullItemName() const;
    MCAPI class HashedString const & getFullNameHash() const;
    MCAPI short getId() const;
    MCAPI class WeakPtr<class BlockLegacy> const & getLegacyBlock() const;
    MCAPI std::string const & getNamespace() const;
    MCAPI class HashedString const & getRawNameHash() const;
    MCAPI std::string const & getRawNameId() const;
    MCAPI class BaseGameVersion const & getRequiredBaseGameVersion() const;
    MCAPI std::string getSerializedName() const;
    MCAPI enum UseAnimation getUseAnimation() const;
    MCAPI bool hasTag(unsigned __int64 const &) const;
    MCAPI bool isElytra() const;
    MCAPI bool isExplodable() const;
    MCAPI bool isFireResistant() const;
    MCAPI bool isNameTag() const;
    MCAPI bool isSeed() const;
    MCAPI class Item & setAllowOffhand(bool);
    MCAPI class Item & setCategory(enum CreativeItemCategory);
    MCAPI class Item & setCreativeGroup(std::string const &);
    MCAPI class Item & setFurnaceBurnIntervalMultiplier(float);
    MCAPI class Item & setFurnaceXPmultiplier(float);
    MCAPI class Item & setIsMirroredArt(bool);
    MCAPI class Item & setMinRequiredBaseGameVersion(class BaseGameVersion const &);
    MCAPI bool shouldDespawn() const;
    MCAPI bool updateCustomBlockEntityTag(class BlockSource &, class ItemStackBase &, class BlockPos const &) const;
    MCAPI bool useOn(class ItemStack &, class Actor &, int, int, int, unsigned char, class Vec3 const &) const;
    MCAPI static std::string const ICON_DESCRIPTION_PREFIX;
    MCAPI static std::string const TAG_DAMAGE;
    MCAPI static void addCreativeItem(class Block const &);
    MCAPI static void addCreativeItem(class ItemInstance const &);
    MCAPI static void addCreativeItem(class ItemStack const &);
    MCAPI static void addLooseCreativeItems(bool, class BaseGameVersion const &);
    MCAPI static void beginCreativeGroup(std::string const &, class ItemInstance const &);
    MCAPI static void beginCreativeGroup(std::string const &, short, short, class CompoundTag const *);
    MCAPI static void beginCreativeGroup(std::string const &, class Block const *, class CompoundTag const *);
    MCAPI static void endCreativeGroup();
    MCAPI static void endCreativeItemDefinitions(bool);
    MCAPI static struct TextureUVCoordinateSet const & getIconTextureUVSet(class TextureAtlasItem const &, int, int);
    MCAPI static class TextureAtlasItem const & getTextureItem(std::string const &);
    MCAPI static struct TextureUVCoordinateSet getTextureUVCoordinateSet(std::string const &, int);
    MCAPI static bool isElytra(class ItemDescriptor const &);
    MCAPI static bool isElytraBroken(int);
    MCAPI static bool isFlyEnabled(class ItemInstance const &);
    MCAPI static bool isSameTypeAndItem(class ItemStackBase const &, class ItemStackBase const &);
    MCAPI static class CreativeGroupInfo * mActiveCreativeGroupInfo;
    MCAPI static class CreativeItemGroupCategory * mActiveCreativeItemCategory;
    MCAPI static class CreativeItemRegistry * mActiveCreativeItemRegistry;
    MCAPI static bool const mGenerateDenyParticleEffect;
    MCAPI static struct TextureUVCoordinateSet mInvalidTextureUVCoordinateSet;
    MCAPI static class std::weak_ptr<class AtlasItemManager> mItemTextureItems;
    MCAPI static void setAtlasItemManager(class std::shared_ptr<class AtlasItemManager>);
    MCAPI static void startCreativeItemDefinitions(bool, class CreativeItemRegistry *);
    MCAPI static struct NewBlockID toBlockId(short);

//protected:
    MCAPI void _helpChangeInventoryItemInPlace(class Actor &, class ItemStack &, class ItemStack &, enum ItemAcquisitionMethod) const;

//private:
    MCAPI static void _addLooseCreativeItemsClient();


protected:

private:
    MCAPI static std::unique_ptr<class std::set<short, struct std::less<short>, class std::allocator<short>>> mServerItemsUsedInCreativeItems;


};