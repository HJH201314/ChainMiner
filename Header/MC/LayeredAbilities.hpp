// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Ability.hpp"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class LayeredAbilities {

#define AFTER_EXTRA

#undef AFTER_EXTRA


public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_LAYEREDABILITIES
#endif
    MCAPI LayeredAbilities(class LayeredAbilities const &);
    MCAPI LayeredAbilities();
    MCAPI void addSaveData(class CompoundTag &) const;
    MCAPI void forEachAbility(class std::function<void (class Ability const &, char const *)> const &, enum Ability::Options) const;
    MCAPI void forEachAbility(class std::function<void (class Ability const &, enum AbilitiesIndex)> const &, enum Ability::Options) const;
    MCAPI void forEachLayer(class std::function<void (enum AbilitiesLayer, class Abilities &)> const &);
    MCAPI void forEachLayer(class std::function<void (enum AbilitiesLayer, class Abilities const &)> const &) const;
    MCAPI class Ability & getAbility(enum AbilitiesLayer, enum AbilitiesIndex);
    MCAPI class Ability const & getAbility(enum AbilitiesIndex) const;
    MCAPI bool getBool(enum AbilitiesIndex) const;
    MCAPI enum CommandPermissionLevel getCommandPermissions() const;
    MCAPI float getFloat(enum AbilitiesIndex) const;
    MCAPI class Abilities & getLayer(enum AbilitiesLayer);
    MCAPI class Abilities const & getLayer(enum AbilitiesLayer) const;
    MCAPI class PermissionsHandler & getPermissionsHandler();
    MCAPI class PermissionsHandler const & getPermissionsHandler() const;
    MCAPI enum PlayerPermissionLevel getPlayerPermissions() const;
    MCAPI bool loadSaveData(class CompoundTag const &);
    MCAPI class LayeredAbilities & operator=(class LayeredAbilities const &);
    MCAPI bool operator==(class LayeredAbilities const &) const;
    MCAPI void setAbility(enum AbilitiesIndex, float);
    MCAPI void setAbility(enum AbilitiesIndex, bool);
    MCAPI void setCommandPermissions(enum CommandPermissionLevel);
    MCAPI void setPermissions(class PermissionsHandler const &);
    MCAPI void setPlayerPermissions(enum PlayerPermissionLevel);

//private:
    MCAPI void _handlePlayerPermissionsChange(enum PlayerPermissionLevel, enum PlayerPermissionLevel);


private:


};