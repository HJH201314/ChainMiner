// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "ScriptModuleMinecraft.hpp"
#include "TextObjectText.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ScriptMinecraftModuleFactory : public TextObjectText {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SCRIPTMINECRAFTMODULEFACTORY
public:
    class ScriptMinecraftModuleFactory& operator=(class ScriptMinecraftModuleFactory const &) = delete;
    ScriptMinecraftModuleFactory(class ScriptMinecraftModuleFactory const &) = delete;
    ScriptMinecraftModuleFactory() = delete;
#endif


public:
    /*0*/ virtual ~ScriptMinecraftModuleFactory();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SCRIPTMINECRAFTMODULEFACTORY
#endif
    MCAPI ScriptMinecraftModuleFactory(class ServerLevel *);
    MCAPI static class std::unordered_map<std::string, std::unique_ptr<class ScriptModuleMinecraft::IComponentFactory>, struct std::hash<std::string>, struct std::equal_to<std::string>, class std::allocator<struct std::pair<std::string const, std::unique_ptr<class ScriptModuleMinecraft::IComponentFactory>>>> & getActorComponentFactories();
    MCAPI static std::string getModuleUUIDAsString();
    MCAPI static struct Scripting::ModuleDescriptor makeModuleDescriptorFor(struct Scripting::Version);

//private:
    MCAPI struct Scripting::ModuleBinding _generateBindings(struct Scripting::Version const &, std::vector<std::string> const &);


private:
    MCAPI static char const * ModuleName;
    MCAPI static class mce::UUID const ModuleUUID;


};