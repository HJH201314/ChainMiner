// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "Item.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class TridentItem : public Item {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_TRIDENTITEM
public:
    class TridentItem& operator=(class TridentItem const &) = delete;
    TridentItem(class TridentItem const &) = delete;
    TridentItem() = delete;
#endif


public:
    /*0*/ virtual ~TridentItem();
    /*7*/ virtual void __unk_vfn_7();
    /*10*/ virtual void __unk_vfn_10();
    /*13*/ virtual void __unk_vfn_13();
    /*15*/ virtual void __unk_vfn_15();
    /*22*/ virtual bool isThrowable() const;
    /*47*/ virtual short getMaxDamage() const;
    /*48*/ virtual int getAttackDamage() const;
    /*51*/ virtual void __unk_vfn_51();
    /*53*/ virtual void __unk_vfn_53();
    /*55*/ virtual bool canDestroyInCreative() const;
    /*60*/ virtual void appendFormattedHovertext(class ItemStackBase const &, class Level &, std::string &, bool) const;
    /*62*/ virtual int getEnchantSlot() const;
    /*63*/ virtual int getEnchantValue() const;
    /*66*/ virtual void __unk_vfn_66();
    /*70*/ virtual void __unk_vfn_70();
    /*71*/ virtual void __unk_vfn_71();
    /*72*/ virtual void __unk_vfn_72();
    /*75*/ virtual void __unk_vfn_75();
    /*79*/ virtual void __unk_vfn_79();
    /*80*/ virtual void __unk_vfn_80();
    /*84*/ virtual class ItemStack & use(class ItemStack &, class Player &) const;
    /*85*/ virtual bool dispense(class BlockSource &, class Container &, int, class Vec3 const &, unsigned char) const;
    /*87*/ virtual void releaseUsing(class ItemStack &, class Player *, int) const;
    /*89*/ virtual void hurtActor(class ItemStack &, class Actor &, class Mob &) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_TRIDENTITEM
#endif
    MCAPI TridentItem(std::string const &, int);
    MCAPI static int const CHARGE_THRESHOLD_TIME;
    MCAPI static int const THROW_THRESHOLD_TIME;

//private:
    MCAPI class Actor * _setupProjectile(class Actor *, class ItemStack, bool) const;


private:


};