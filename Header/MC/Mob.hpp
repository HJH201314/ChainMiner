// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
class UserEntityIdentifierComponent;

#undef BEFORE_EXTRA

class Mob : public Actor {

#define AFTER_EXTRA
// Add Member There
public:
struct JumpPreventionResult {
    JumpPreventionResult() = delete;
    JumpPreventionResult(JumpPreventionResult const&) = delete;
    JumpPreventionResult(JumpPreventionResult const&&) = delete;
};

public:

    LIAPI bool refreshInventory();

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_MOB
public:
    class Mob& operator=(class Mob const &) = delete;
    Mob(class Mob const &) = delete;
    Mob() = delete;
#endif


public:
    /*0*/ virtual bool hasComponent(class HashedString const &) const;
    /*7*/ virtual void outOfWorld();
    /*8*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*9*/ virtual void reloadHardcodedClient(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*10*/ virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*13*/ virtual void _doInitialMove();
    /*14*/ virtual ~Mob();
    /*31*/ virtual float getInterpolatedBodyRot(float) const;
    /*32*/ virtual float getInterpolatedHeadRot(float) const;
    /*33*/ virtual float getInterpolatedBodyYaw(float) const;
    /*34*/ virtual float getYawSpeedInDegreesPerSecond() const;
    /*40*/ virtual void __unk_vfn_40();
    /*41*/ virtual void blockedByShield(class ActorDamageSource const &, class Actor &);
    /*43*/ virtual void teleportTo(class Vec3 const &, bool, int, int);
    /*48*/ virtual void normalTick();
    /*49*/ virtual void baseTick();
    /*50*/ virtual void passengerTick();
    /*52*/ virtual bool startRiding(class Actor &);
    /*53*/ virtual void addPassenger(class Actor &);
    /*60*/ virtual void __unk_vfn_60();
    /*67*/ virtual void __unk_vfn_67();
    /*81*/ virtual void __unk_vfn_81();
    /*87*/ virtual void __unk_vfn_87();
    /*91*/ virtual bool isImmobile() const;
    /*93*/ virtual bool isPickable();
    /*94*/ virtual void __unk_vfn_94();
    /*95*/ virtual bool isSleeping() const;
    /*96*/ virtual void setSleeping(bool);
    /*97*/ virtual void __unk_vfn_97();
    /*99*/ virtual bool isBlocking() const;
    /*101*/ virtual bool isAlive() const;
    /*104*/ virtual void __unk_vfn_104();
    /*105*/ virtual bool isSurfaceMob() const;
    /*106*/ virtual void __unk_vfn_106();
    /*107*/ virtual void __unk_vfn_107();
    /*108*/ virtual void __unk_vfn_108();
    /*111*/ virtual void setTarget(class Actor *);
    /*114*/ virtual bool attack(class Actor &, enum ActorDamageCause const &);
    /*125*/ virtual bool canPowerJump() const;
    /*127*/ virtual bool isJumping() const;
    /*134*/ virtual enum ActorDamageCause getBlockDamageCause(class Block const &) const;
    /*135*/ virtual void animateHurt();
    /*136*/ virtual bool doFireHurt(int);
    /*140*/ virtual void handleEntityEvent(enum ActorEvent, int);
    /*154*/ virtual enum ArmorMaterialType getArmorMaterialTypeInSlot(enum ArmorSlot) const;
    /*155*/ virtual enum ArmorTextureType getArmorMaterialTextureTypeInSlot(enum ArmorSlot) const;
    /*156*/ virtual float getArmorColorInSlot(enum ArmorSlot, int) const;
    /*158*/ virtual void setEquippedSlot(enum EquipmentSlot, class ItemStack const &);
    /*172*/ virtual bool canFreeze() const;
    /*180*/ virtual void __unk_vfn_180();
    /*184*/ virtual void causeFallDamage(float, float, class ActorDamageSource);
    /*192*/ virtual bool canBePulledIntoVehicle() const;
    /*193*/ virtual bool inCaravan() const;
    /*194*/ virtual void __unk_vfn_194();
    /*198*/ virtual void stopRiding(bool, bool, bool);
    /*201*/ virtual void buildDebugInfo(std::string &) const;
    /*206*/ virtual int getDeathTime() const;
    /*217*/ virtual void swing();
    /*219*/ virtual void __unk_vfn_219();
    /*220*/ virtual void __unk_vfn_220();
    /*224*/ virtual float getYHeadRot() const;
    /*225*/ virtual void setYHeadRot(float);
    /*226*/ virtual float getYHeadRotO() const;
    /*245*/ virtual void __unk_vfn_245();
    /*248*/ virtual void __unk_vfn_248();
    /*249*/ virtual void kill();
    /*250*/ virtual void die(class ActorDamageSource const &);
    /*251*/ virtual bool shouldDropDeathLoot() const;
    /*262*/ virtual void updateEntitySpecificMolangVariables(class RenderParams &);
    /*264*/ virtual void __unk_vfn_264();
    /*265*/ virtual bool _hurt(class ActorDamageSource const &, float, bool, bool);
    /*268*/ virtual void readAdditionalSaveData(class CompoundTag const &, class DataLoadHelper &);
    /*269*/ virtual void addAdditionalSaveData(class CompoundTag &) const;
    /*270*/ virtual void _playStepSound(class BlockPos const &, class Block const &);
    /*272*/ virtual void __unk_vfn_272();
    /*279*/ virtual void _removePassenger(struct ActorUniqueID const &, bool, bool, bool);
    /*280*/ virtual void _onSizeUpdated();
    /*281*/ virtual void __unk_vfn_281();
    /*282*/ virtual void knockback(class Actor *, int, float, float, float, float, float);
    /*283*/ virtual void spawnAnim();
    /*284*/ virtual void setSprinting(bool);
    /*285*/ virtual enum LevelSoundEvent getHurtSound();
    /*286*/ virtual enum LevelSoundEvent getDeathSound();
    /*287*/ virtual struct TextureUVCoordinateSet const * getItemInHandIcon(class ItemStack const &, int);
    /*288*/ virtual float getSpeed() const;
    /*289*/ virtual void setSpeed(float);
    /*290*/ virtual float getJumpPower() const;
    /*291*/ virtual void hurtEffects(class ActorDamageSource const &, float, bool, bool);
    /*292*/ virtual float getMeleeWeaponDamageBonus(class Mob *);
    /*293*/ virtual int getMeleeKnockbackBonus();
    /*294*/ virtual void travel(float, float, float);
    /*295*/ virtual void travel(struct IMobMovementProxy &, float, float, float) const;
    /*296*/ virtual void applyFinalFriction(float, bool);
    /*297*/ virtual void aiStep();
    /*298*/ virtual void aiStep(struct IMobMovementProxy &) const;
    /*299*/ virtual void pushActors();
    /*300*/ virtual void lookAt(class Actor *, float, float);
    /*301*/ virtual bool isLookingAtAnEntity();
    /*302*/ virtual bool checkSpawnRules(bool);
    /*303*/ virtual bool checkSpawnObstruction() const;
    /*304*/ virtual float getAttackAnim(float);
    /*305*/ virtual int getItemUseDuration() const;
    /*306*/ virtual float getItemUseStartupProgress() const;
    /*307*/ virtual float getItemUseIntervalProgress() const;
    /*308*/ virtual int getItemUseIntervalAxis() const;
    /*309*/ virtual int getTimeAlongSwing() const;
    /*310*/ virtual void __unk_vfn_310();
    /*311*/ virtual float getMaxHeadXRot();
    /*312*/ virtual bool isAlliedTo(class Mob *);
    /*313*/ virtual bool doHurtTarget(class Actor *, enum ActorDamageCause const &);
    /*314*/ virtual void __unk_vfn_314();
    /*315*/ virtual void leaveCaravan();
    /*316*/ virtual void joinCaravan(class Mob *);
    /*317*/ virtual bool hasCaravanTail() const;
    /*318*/ virtual struct ActorUniqueID getCaravanHead() const;
    /*319*/ virtual int getArmorValue() const;
    /*320*/ virtual float getArmorCoverPercentage() const;
    /*321*/ virtual int getToughnessValue() const;
    /*322*/ virtual void hurtArmorSlots(class ActorDamageSource const &, int, class std::bitset<4>);
    /*323*/ virtual void setDamagedArmor(enum ArmorSlot, class ItemStack const &);
    /*324*/ virtual void sendArmorDamage(class std::bitset<4>);
    /*325*/ virtual void sendArmor(class std::bitset<4>);
    /*326*/ virtual void containerChanged(int);
    /*327*/ virtual void updateEquipment();
    /*328*/ virtual int clearEquipment();
    /*329*/ virtual std::vector<int> getAllArmorID() const;
    /*330*/ virtual std::vector<class ItemStack const *> getAllHand() const;
    /*331*/ virtual std::vector<class ItemStack const *> getAllEquipment() const;
    /*332*/ virtual int getArmorTypeHash();
    /*333*/ virtual void dropEquipmentOnDeath(class ActorDamageSource const &, int);
    /*334*/ virtual void dropEquipmentOnDeath();
    /*335*/ virtual void clearVanishEnchantedItemsOnDeath();
    /*336*/ virtual void sendInventory(bool);
    /*337*/ virtual float getDamageAfterEnchantReduction(class ActorDamageSource const &, float) const;
    /*338*/ virtual float getDamageAfterArmorReduction(class ActorDamageSource const &, float) const;
    /*339*/ virtual float getDamageAfterResistanceEffect(class ActorDamageSource const &, float) const;
    /*340*/ virtual bool createAIGoals();
    /*341*/ virtual void onBorn(class Actor &, class Actor &);
    /*342*/ virtual bool setItemSlot(enum EquipmentSlot, class ItemStack const &);
    /*343*/ virtual void setTransitioningSitting(bool);
    /*344*/ virtual void attackAnimation(class Actor *, float);
    /*345*/ virtual int getAttackTime();
    /*346*/ virtual float _getWalkTargetValue(class BlockPos const &);
    /*347*/ virtual bool canExistWhenDisallowMob() const;
    /*348*/ virtual void __unk_vfn_348();
    /*349*/ virtual void ascendLadder();
    /*350*/ virtual void ascendBlockByJumping();
    /*351*/ virtual void descendBlockByCrouching();
    /*352*/ virtual void dropContainer();
    /*353*/ virtual std::unique_ptr<class BodyControl> initBodyControl();
    /*354*/ virtual void jumpFromGround();
    /*355*/ virtual void jumpFromGround(struct IMobMovementProxy &) const;
    /*356*/ virtual void updateAi();
    /*357*/ virtual void newServerAiStep();
    /*358*/ virtual void _serverAiMobStep();
    /*359*/ virtual void dropBags();
    /*360*/ virtual void tickDeath();
    /*361*/ virtual void updateGliding();
    /*362*/ virtual void __unk_vfn_362();
    /*363*/ virtual class AABB _getAdjustedAABBForSpawnCheck(class AABB const &, class Vec3 const &) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_MOB
    MCVAPI bool _allowAscendingScaffolding() const;
    MCVAPI void ate();
    MCVAPI bool canBeControlledByPassenger();
    MCVAPI bool isShootable();
    MCVAPI void renderDebugServerState(class Options const &);
    MCVAPI bool useNewAi() const;
#endif
    MCAPI Mob(class Level &, class EntityContext &);
    MCAPI Mob(class ActorDefinitionGroup *, struct ActorDefinitionIdentifier const &, class EntityContext &);
    MCAPI void _endJump();
    MCAPI void addSpeedModifier(class mce::UUID const &, std::string const &, float);
    MCAPI float calcMoveRelativeSpeed(enum TravelType);
    MCAPI bool checkForPostHitDamageImmunity(float, class ActorDamageSource const &);
    MCAPI bool checkTotemDeathProtection(class ActorDamageSource const &);
    MCAPI void createAI(std::vector<struct GoalDefinition>);
    MCAPI bool discardFriction() const;
    MCAPI void emitJumpPreventedEvent(class BlockPos const &);
    MCAPI void frostWalk();
    MCAPI class BlockPos getBoundOrigin() const;
    MCAPI int getCaravanSize() const;
    MCAPI int getEatCounter() const;
    MCAPI class Mob * getFirstCaravanHead();
    MCAPI float getFlightSpeed() const;
    MCAPI float getFrictionModifier() const;
    MCAPI int getGlidingTicks() const;
    MCAPI class ItemStack const & getItemSlot(enum EquipmentSlot) const;
    MCAPI float getJumpEffectAmplifierValue();
    MCAPI float getJumpMultiplier();
    MCAPI struct JumpPreventionResult getJumpPrevention();
    MCAPI float getMovementComponentCurrentSpeed() const;
    MCAPI int getNoActionTime() const;
    MCAPI float getPassengerLockedBodyRot() const;
    MCAPI float getPassengerRotLimit() const;
    MCAPI int getRollCounter() const;
    MCAPI float getSwimSpeedMultiplier() const;
    MCAPI struct ActorUniqueID getTargetCaptain() const;
    MCAPI enum TravelType getTravelType();
    MCAPI float getYRotA() const;
    MCAPI float getZza() const;
    MCAPI bool hasBoundOrigin() const;
    MCAPI void hurtArmor(class ActorDamageSource const &, int);
    MCAPI bool isAbleToMove() const;
    MCAPI bool isEating() const;
    MCAPI bool isFrostWalking() const;
    MCAPI bool isGliding() const;
    MCAPI bool isLayingEgg() const;
    MCAPI bool isPregnant() const;
    MCAPI bool isRolling() const;
    MCAPI bool isSprinting() const;
    MCAPI bool isTransitioningSitting() const;
    MCAPI void onPlayerDimensionChanged(class Player *, class AutomaticID<class Dimension, int>);
    MCAPI void onPlayerJump(int);
    MCAPI void removeSpeedModifier(class mce::UUID const &);
    MCAPI void resetAttributes();
    MCAPI void resetNoActionTime();
    MCAPI void sendArmorDamageSlot(enum ArmorSlot);
    MCAPI void sendArmorSlot(enum ArmorSlot);
    MCAPI void setEatCounter(int);
    MCAPI void setEating(bool);
    MCAPI void setFlightSpeed(float);
    MCAPI void setFrictionModifier(float);
    MCAPI void setIsLayingEgg(bool);
    MCAPI void setIsPregnant(bool);
    MCAPI void setJumpVelRedux(bool);
    MCAPI void setJumping(bool);
    MCAPI void setMovementComponentCurrentSpeed(float);
    MCAPI void setNaturallySpawned(bool);
    MCAPI void setPassengerLockedBodyRot(float);
    MCAPI void setPassengerRotLimit(float);
    MCAPI void setRolling(bool);
    MCAPI void setSpawnMethod(enum MobSpawnMethod);
    MCAPI void setSpeedModifier(float);
    MCAPI void setSurfaceMob(bool);
    MCAPI void setSwimSpeedMultiplier(float);
    MCAPI void setTargetCaptain(struct ActorUniqueID);
    MCAPI void setXxa(float);
    MCAPI void setYRotA(float);
    MCAPI void setYya(float);
    MCAPI void setZza(float);
    MCAPI void snapToYBodyRot(float);
    MCAPI void snapToYHeadRot(float);
    MCAPI static int const ARMOR_DAMAGE_DIVISOR;
    MCAPI static float const ARMOR_PROTECTION_DIVIDER;
    MCAPI static float const ASCEND_BLOCK_BY_JUMPING_SPEED;
    MCAPI static float const BASE_ARMOR_TOUGHNESS;
    MCAPI static float const DEFAULT_GRAVITY;
    MCAPI static float const FRICTION_CONSTANT;
    MCAPI static float const FRICTION_CONSTANT_MODIFIED;
    MCAPI static float const FRICTION_MODIFIER;
    MCAPI static float const GLIDING_FALL_RESET_DELTA;
    MCAPI static float const LADDER_CLIMB_SPEED;
    MCAPI static float const MAX_ARMOR;
    MCAPI static float const MIN_ARMOR_RATIO;
    MCAPI static float const NUM_ARMOR_ITEMS;
    MCAPI static float const PLAYER_SWIMMING_SURFACE_OFFSET;
    MCAPI static int const REMOVE_PASSENGERS_DELAY;
    MCAPI static float const SLOW_FALL_GRAVITY;
    MCAPI static int const SPAWN_XP_DELAY;
    MCAPI static int const TOTAL_ROLL_STEPS;
    MCAPI static void _aiStep(struct IMobMovementProxy &);
    MCAPI static float _calcMoveRelativeSpeed(struct IMobMovementProxy &, enum TravelType);
    MCAPI static void _travel(struct IMobMovementProxy &, float, float, float);
    MCAPI static void _updateMobTravel(struct IMobMovementProxy &);
    MCAPI static float calculateJumpImpulse(struct IMobMovementProxy const &);
    MCAPI static float getJumpEffectAmplifierValue(struct IMobMovementProxy const &);
    MCAPI static struct JumpPreventionResult getJumpPrevention(struct IMobMovementProxy const &);
    MCAPI static enum TravelType getTravelType(struct IMobMovementProxy &);
    MCAPI static bool isImmobile(struct IActorMovementProxy const &);
    MCAPI static bool shouldApplyWaterGravity(struct IActorMovementProxy const &);
    MCAPI static class Mob * tryGetFromEntity(class EntityContext &, bool);

//protected:
    MCAPI void _doSprintParticleEffect();
    MCAPI void _registerMobAttributes();
    MCAPI int getCurrentSwingDuration();
    MCAPI void processSoulSpeed();
    MCAPI std::unique_ptr<class ListTag> saveOffhand() const;
    MCAPI void tickEffects();
    MCAPI void updateAttackAnim();
    MCAPI bool updateGlidingDurability();
    MCAPI static void _jumpFromGround(struct IMobMovementProxy &);

//private:
    MCAPI bool _initHardCodedComponents();
    MCAPI void _initialize(class EntityContext &);
    MCAPI void _updateSprintingState();
    MCAPI void _verifyAttributes();
    MCAPI static bool _tryApplyingLevitation(struct IMobMovementProxy const &, class Vec3 &);


protected:
    MCAPI static int const MAX_INACTIVITY_TIMER;

private:


};