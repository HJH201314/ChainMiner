// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "PropertyMetadata.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class PropertyGroup {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_PROPERTYGROUP
public:
    class PropertyGroup& operator=(class PropertyGroup const &) = delete;
    PropertyGroup(class PropertyGroup const &) = delete;
#endif


public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_PROPERTYGROUP
#endif
    MCAPI PropertyGroup();
    MCAPI class CompoundTag getNetworkSyncPropertyDescriptionsAsCompound() const;
    MCAPI class PropertyMetadata const * getPropertyMetadata(unsigned __int64) const;
    MCAPI class PropertyMetadata const * getPropertyMetadataByString(std::string const &) const;
    MCAPI static unsigned __int64 const MAX_ENUM_SIZE;
    MCAPI static class std::shared_ptr<class PropertyGroup const> loadPropertiesFromJson(class Json::Value const &);

//private:
    MCAPI void _addEnumIndexProperty(std::string const &, bool, unsigned __int64, std::vector<std::string> const &);
    MCAPI void _addFloatProperty(std::string const &, bool, float, float, float);
    MCAPI void _addIntProperty(std::string const &, bool, int, int, int);
    MCAPI void _addPropertyMetadata(std::string const &, bool, enum PropertyMetadata::ContainedPropertyType);
    MCAPI bool _loadPropertyFromJson(std::string const &, class Json::Value const &);
    MCAPI void _reserveSpaceForTypes(std::vector<unsigned __int64> const &);
    MCAPI static enum PropertyMetadata::ContainedPropertyType _getJsonPropertyType(class Json::Value const &);


private:


};