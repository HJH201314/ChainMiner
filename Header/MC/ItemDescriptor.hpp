// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ItemDescriptor {

#define AFTER_EXTRA
// Add Member There
    char filler[8];

#define DISABLE_CONSTRUCTOR_PREVENTION_ITEMDESCRIPTOR
#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ITEMDESCRIPTOR
public:
    class ItemDescriptor& operator=(class ItemDescriptor const &) = delete;
#endif


public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_ITEMDESCRIPTOR
#endif
    MCAPI ItemDescriptor();
    MCAPI ItemDescriptor(class ItemDescriptor &&);
    MCAPI ItemDescriptor(struct ItemTag const &);
    MCAPI ItemDescriptor(class ItemDescriptor const &);
    MCAPI ItemDescriptor(class Block const &);
    MCAPI ItemDescriptor(class BlockLegacy const &);
    MCAPI ItemDescriptor(class Item const &, int);
    MCAPI ItemDescriptor(class Json::Value const &, class SemVersion const &);
    MCAPI ItemDescriptor(class gsl::basic_string_span<char const, -1>, int);
    MCAPI short getAuxValue() const;
    MCAPI class Block const * getBlock() const;
    MCAPI std::string getFullName() const;
    MCAPI short getId() const;
    MCAPI int getIdAux() const;
    MCAPI class Item const * getItem() const;
    MCAPI class WeakPtr<class BlockLegacy> const & getLegacyBlock() const;
    MCAPI std::string getRawNameId() const;
    MCAPI std::string getSerializedNameAndAux() const;
    MCAPI bool isDefinedAsItemName() const;
    MCAPI bool isNull() const;
    MCAPI bool isValid(bool) const;
    MCAPI void operator=(class ItemDescriptor &&);
    MCAPI void operator=(class ItemDescriptor const &);
    MCAPI bool operator==(class ItemDescriptor const &) const;
    MCAPI bool sameItem(class ItemDescriptor const &, bool) const;
    MCAPI bool sameItem(class ItemStack const &, bool) const;
    MCAPI class std::optional<class CompoundTag> save() const;
    MCAPI ~ItemDescriptor();
    MCAPI static void bindType();

//private:
    MCAPI void _initFromTagExpression(std::string const &, enum MolangVersion);
    MCAPI void _resolve() const;
    MCAPI static void fromMap(class ItemDescriptor &, class std::map<std::string, std::string, struct std::less<std::string>, class std::allocator<struct std::pair<std::string const, std::string>>> const &, class BedrockLoadContext const &);
    MCAPI static class std::map<std::string, std::string, struct std::less<std::string>, class std::allocator<struct std::pair<std::string const, std::string>>> toMap(class ItemDescriptor const &);


private:


};