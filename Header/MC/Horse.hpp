// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Animal.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class Horse : public Animal {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_HORSE
public:
    class Horse& operator=(class Horse const &) = delete;
    Horse(class Horse const &) = delete;
    Horse() = delete;
#endif


public:
    /*8*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*14*/ virtual ~Horse();
    /*36*/ virtual class Vec3 getInterpolatedRidingOffset(float) const;
    /*41*/ virtual void __unk_vfn_41();
    /*49*/ virtual void normalTick();
    /*52*/ virtual void positionPassenger(class Actor &, float);
    /*61*/ virtual void __unk_vfn_61();
    /*68*/ virtual void __unk_vfn_68();
    /*80*/ virtual float getShadowRadius() const;
    /*82*/ virtual void __unk_vfn_82();
    /*85*/ virtual void __unk_vfn_85();
    /*88*/ virtual void __unk_vfn_88();
    /*92*/ virtual bool isImmobile() const;
    /*96*/ virtual void __unk_vfn_96();
    /*99*/ virtual void __unk_vfn_99();
    /*106*/ virtual void __unk_vfn_106();
    /*108*/ virtual void __unk_vfn_108();
    /*109*/ virtual void __unk_vfn_109();
    /*111*/ virtual void __unk_vfn_111();
    /*122*/ virtual void onFailedTame();
    /*126*/ virtual void setStanding(bool);
    /*141*/ virtual void feed(int);
    /*142*/ virtual void handleEntityEvent(enum ActorEvent, int);
    /*174*/ virtual bool canFreeze() const;
    /*182*/ virtual void __unk_vfn_182();
    /*184*/ virtual struct ActorUniqueID getControllingPlayer() const;
    /*186*/ virtual void causeFallDamage(float, float, class ActorDamageSource);
    /*187*/ virtual void handleFallDistanceOnServer(float, float, bool);
    /*191*/ virtual void onSynchedDataUpdate(int);
    /*196*/ virtual void __unk_vfn_196();
    /*219*/ virtual void openContainerComponent(class Player &);
    /*222*/ virtual void __unk_vfn_222();
    /*223*/ virtual void __unk_vfn_223();
    /*248*/ virtual void __unk_vfn_248();
    /*251*/ virtual void __unk_vfn_251();
    /*253*/ virtual void die(class ActorDamageSource const &);
    /*267*/ virtual void updateEntitySpecificMolangVariables(class RenderParams &);
    /*269*/ virtual void __unk_vfn_269();
    /*270*/ virtual bool _hurt(class ActorDamageSource const &, float, bool, bool);
    /*275*/ virtual void _playStepSound(class BlockPos const &, class Block const &);
    /*277*/ virtual void __unk_vfn_277();
    /*285*/ virtual void __unk_vfn_285();
    /*297*/ virtual void travel(float, float, float);
    /*300*/ virtual void aiStep();
    /*313*/ virtual void __unk_vfn_313();
    /*317*/ virtual void __unk_vfn_317();
    /*322*/ virtual int getArmorValue() const;
    /*351*/ virtual void __unk_vfn_351();
    /*365*/ virtual void __unk_vfn_365();
    /*367*/ virtual void setType(int);
    /*368*/ virtual int getType() const;
    /*369*/ virtual void setHorseEating(bool);
    /*370*/ virtual float getStandAnim(float) const;
    /*371*/ virtual bool isAdult() const;
    /*372*/ virtual bool isHorseEating() const;
    /*373*/ virtual bool isMouthOpen() const;
    /*374*/ virtual bool isTailMoving() const;
    /*375*/ virtual void makeMad();
    /*376*/ virtual bool tameToPlayer(class Player &, bool);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_HORSE
    MCVAPI bool useNewAi() const;
#endif
    MCAPI Horse(class ActorDefinitionGroup *, struct ActorDefinitionIdentifier const &, class EntityContext &);
    MCAPI void postNormalTick();
    MCAPI void postTravel(class Actor *, bool, enum HorsePostTravelType);
    MCAPI static int const DONKEY_CHEST_COUNT;
    MCAPI static class Vec3 getInterpolatedRidingOffset(class Vec2 const &, float, float, float);

//private:
    MCAPI void openMouth();
    MCAPI void setHorseFlag(enum HorseFlags, bool);
    MCAPI bool setHorseType(enum ActorType &);


private:
    MCAPI static int const DATA_AGE;


};